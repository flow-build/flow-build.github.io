(self.webpackChunkworkflow=self.webpackChunkworkflow||[]).push([[4450],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4111:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=["components"],s={},c={unversionedId:"documentation/notifiers",id:"documentation/notifiers",isDocsHomePage:!1,title:"Notifiers",description:"Durante o ciclo de execu\xe7\xe3o do processo, o FlowBuild emite uma s\xe9rie de eventos.",source:"@site/docs/documentation/notifiers.md",sourceDirName:"documentation",slug:"/documentation/notifiers",permalink:"/docs/documentation/notifiers",editUrl:"https://bitbucket.org/fdtedsd/workflow-api-doc/src/master/docs/documentation/notifiers.md",version:"current",frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Ciclo de Vida de uma Atividade",permalink:"/docs/documentation/cicloDeVidaDeAtividade"},next:{title:"Logs",permalink:"/docs/documentation/logging"}},l=[{value:"Process State Notifier",id:"process-state-notifier",children:[]},{value:"Activity Manager Notifier",id:"activity-manager-notifier",children:[]}],p={toc:l};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Durante o ciclo de execu\xe7\xe3o do processo, o FlowBuild emite uma s\xe9rie de eventos."),(0,a.kt)("p",null,"A maior parte desses eventos s\xe3o automaticamente capturados e ",(0,a.kt)("a",{parentName:"p",href:"logging"},"logados")," no console, por\xe9m para 2 tipos de eventos \xe9 poss\xedvel configurar tratamentos espec\xedficos. S\xe3o eles:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ProcessStateNotifier"),(0,a.kt)("li",{parentName:"ul"},"ActivityManagerNotifier")),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Nota")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Esses eventos podem ser utilizado para avisar interessados no processo, criar eventos para telemetria, notifica\xe7\xf5es (e-mails, mensagens, etc). Tais  eventos n\xe3o devem, contudo, influenciar o pr\xf3prio processo."))),(0,a.kt)("p",null,"Quando implementar seu servidor do workflow, durante a inicializa\xe7\xe3o, crie listeners baseados nesses 2 notifiers."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=startServer",title:"startServer"},"  ...\n  const flowbuild = setWorkflow(persistMode, persistArgs);\n  \n  const processStateListener = buildProcessStateListener();\n  const activityManagerListener = buildActivityManagerListener();\n\n  flowbuild.engine.setProcessStateNofitier(processStateListener);\n  flowbuild.engine.setActivityManagerNofitier(activityManagerListener);\n  ...\n")),(0,a.kt)("h2",{id:"process-state-notifier"},"Process State Notifier"),(0,a.kt)("p",null,"Sempre que um novo estado \xe9 gerado para um processo, uma notifica\xe7\xe3o \xe9 enviada contendo todos os dados de um ",(0,a.kt)("a",{parentName:"p",href:"docs/engine/models/processState"},"processState"),"."),(0,a.kt)("p",null,"Exemplos de aplica\xe7\xe3o:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"capturar estados ",(0,a.kt)("strong",{parentName:"li"},"FINISHED")," e notificar os atores envolvidos do encerramento do processo."),(0,a.kt)("li",{parentName:"ul"},"capturar estados ",(0,a.kt)("strong",{parentName:"li"},"ERROR")," e enviar mensagens para os times de suporte."),(0,a.kt)("li",{parentName:"ul"},"capturar estados ",(0,a.kt)("strong",{parentName:"li"},"UNSTARTED")," e notificar o ator envolvido da cria\xe7\xe3o do processo - caso existam casos de uso de processso iniciados em favor de terceiros.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const Logger = require('yourLogLibrary')\nconst { sendEvent } = require('yourTelemetryLibrary');\n\nfunction buildProcessStateListener() {\n  return async (processState) => {\n    const logger = Logger.getInstance();\n    if(processState.status === 'error') {\n        logger.error(\n            new Error(`Error on process: ${processState.process_id}, error: ${processState.error}`),\n        );\n    }\n    sendEvent([{\n        actor_id: actorData.actor_id,\n        status: processState.status,\n        process_id: processState.process_id,\n        workflow_name: processState.workflow_name,\n        eventType: 'process_state',\n    }]);\n  };\n}\n\n")),(0,a.kt)("h2",{id:"activity-manager-notifier"},"Activity Manager Notifier"),(0,a.kt)("p",null,"Neste caso, uma notifica\xe7\xe3o \xe9 emitida sempre que um activity manager \xe9 gerado, com os todos os ",(0,a.kt)("a",{parentName:"p",href:"docs/engine/models/activity_manager"},"dados"),", acrescido do ID do processo."),(0,a.kt)("p",null,"Uma implementa\xe7\xe3o comum \xe9 utilizar esse notifier para notificar o usu\xe1rio de uma nova atividade. O canal fica conectado a um WebSocket e o servidor posta uma mensagem neste WebSocket informando da atividade, evitando a necessidade do canal ficar executando um pooling intensivo para verificar por novas tarefas."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js",metastring:"title=Exemplo",title:"Exemplo"},"const mqtt = require('mqtt')\n\nconst connect = () => { \n    const settings = {\n        host: ...,\n        port: ...,\n        protocol: 'mqtt',\n        clientId: uuid()\n    }\n    const client = mqtt.connect(settings);\n\n    return client\n}\n\nconst publishMessage = (client, topic, message)  => {\n  client.publish(topic, message, { qos: 1 });\n}\n\nfunction buildActivityManagerListener({ client }) {\n  return async (activityManager) => {\n    const topic = `/process/${activityManager._process_id}/activity`;\n    const message = JSON.stringify({\n        activityManagerId: activityManager._id,\n      });\n    \n    publishMessage(client, topic, message);\n  };\n};\n\n    ... \n    const mqttClient = connect();\n\n    startServer\n    ...\n")))}d.isMDXComponent=!0}}]);